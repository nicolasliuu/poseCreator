{"ast":null,"code":"var _jsxFileName = \"/Users/vantony/Documents/sar_storytelling/pose-creator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport URDFLoader from 'urdf-loader';\nimport { WebGLRenderer, PerspectiveCamera, Scene, Mesh, PlaneBufferGeometry, ShadowMaterial, DirectionalLight, PCFSoftShadowMap, sRGBEncoding, Color, AmbientLight, Box3, LoadingManager, MathUtils } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const canvasRef = useRef(null);\n  let scene, camera, renderer, robot, controls;\n  function init() {\n    scene = new Scene();\n    scene.background = new Color(0x263238);\n    camera = new PerspectiveCamera();\n    camera.position.set(10, 10, 10);\n    camera.lookAt(0, 0, 0);\n    renderer = new WebGLRenderer({\n      antialias: true\n    });\n    renderer.outputEncoding = sRGBEncoding;\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = PCFSoftShadowMap;\n    document.body.appendChild(renderer.domElement);\n    const directionalLight = new DirectionalLight(0xffffff, 1.0);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.setScalar(1024);\n    directionalLight.position.set(5, 30, 5);\n    scene.add(directionalLight);\n    const ambientLight = new AmbientLight(0xffffff, 0.2);\n    scene.add(ambientLight);\n    const ground = new Mesh(new PlaneBufferGeometry(), new ShadowMaterial({\n      opacity: 0.25\n    }));\n    ground.rotation.x = -Math.PI / 2;\n    ground.scale.setScalar(100);\n    ground.receiveShadow = true;\n    scene.add(ground);\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.minDistance = 4;\n    controls.target.y = 1;\n    controls.update();\n\n    // Load robot\n    const manager = new LoadingManager();\n    const loader = new URDFLoader(manager);\n    loader.load('./robot.urdf', result => {\n      robot = result;\n    });\n\n    // wait until all the geometry has loaded to add the model to the scene\n    manager.onLoad = () => {\n      robot.rotation.x = Math.PI / 2;\n      robot.traverse(c => {\n        c.castShadow = true;\n      });\n      robot.updateMatrixWorld(true);\n      const bb = new Box3();\n      bb.setFromObject(robot);\n      robot.position.y -= bb.min.y;\n      scene.add(robot);\n    };\n  }\n  function render() {\n    requestAnimationFrame(render);\n    renderer.render(scene, camera);\n  }\n  useEffect(() => {\n    init();\n    render();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      width: '100vw',\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","URDFLoader","WebGLRenderer","PerspectiveCamera","Scene","Mesh","PlaneBufferGeometry","ShadowMaterial","DirectionalLight","PCFSoftShadowMap","sRGBEncoding","Color","AmbientLight","Box3","LoadingManager","MathUtils","OrbitControls","jsxDEV","_jsxDEV","App","_s","canvasRef","scene","camera","renderer","robot","controls","init","background","position","set","lookAt","antialias","outputEncoding","shadowMap","enabled","type","document","body","appendChild","domElement","directionalLight","castShadow","shadow","mapSize","setScalar","add","ambientLight","ground","opacity","rotation","x","Math","PI","scale","receiveShadow","minDistance","target","y","update","manager","loader","load","result","onLoad","traverse","c","updateMatrixWorld","bb","setFromObject","min","render","requestAnimationFrame","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vantony/Documents/sar_storytelling/pose-creator/src/App.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport URDFLoader from 'urdf-loader';\nimport {\n  WebGLRenderer,\n  PerspectiveCamera,\n  Scene,\n  Mesh,\n  PlaneBufferGeometry,\n  ShadowMaterial,\n  DirectionalLight,\n  PCFSoftShadowMap,\n  sRGBEncoding,\n  Color,\n  AmbientLight,\n  Box3,\n  LoadingManager,\n  MathUtils,\n} from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nfunction App() {\n  const canvasRef = useRef(null);\n  let scene, camera, renderer, robot, controls;\n\n\n  function init() {\n\n    scene = new Scene();\n    scene.background = new Color(0x263238);\n\n    camera = new PerspectiveCamera();\n    camera.position.set(10, 10, 10);\n    camera.lookAt(0, 0, 0);\n\n    renderer = new WebGLRenderer({ antialias: true });\n    renderer.outputEncoding = sRGBEncoding;\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = PCFSoftShadowMap;\n    document.body.appendChild(renderer.domElement);\n\n    const directionalLight = new DirectionalLight(0xffffff, 1.0);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.setScalar(1024);\n    directionalLight.position.set(5, 30, 5);\n    scene.add(directionalLight);\n\n    const ambientLight = new AmbientLight(0xffffff, 0.2);\n    scene.add(ambientLight);\n\n    const ground = new Mesh(new PlaneBufferGeometry(), new ShadowMaterial({ opacity: 0.25 }));\n    ground.rotation.x = -Math.PI / 2;\n    ground.scale.setScalar(100);\n    ground.receiveShadow = true;\n    scene.add(ground);\n\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.minDistance = 4;\n    controls.target.y = 1;\n    controls.update();\n\n    // Load robot\n    const manager = new LoadingManager();\n    const loader = new URDFLoader(manager);\n    loader.load('./robot.urdf', result => {\n\n        robot = result;\n\n    });\n\n    // wait until all the geometry has loaded to add the model to the scene\n    manager.onLoad = () => {\n\n        robot.rotation.x = Math.PI / 2;\n        robot.traverse(c => {\n            c.castShadow = true;\n        });\n        \n        robot.updateMatrixWorld(true);\n\n        const bb = new Box3();\n        bb.setFromObject(robot);\n\n        robot.position.y -= bb.min.y;\n        scene.add(robot);\n\n    };\n  }\n    function render() {\n\n      requestAnimationFrame(render);\n      renderer.render(scene, camera);\n  \n  }\n  useEffect(() => {\n    init();\n    render();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{ width: '100vw', height: '100vh' }}\n    />\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
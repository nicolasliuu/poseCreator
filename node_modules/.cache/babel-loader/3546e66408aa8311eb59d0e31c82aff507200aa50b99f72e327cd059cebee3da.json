{"ast":null,"code":"import { BufferAttribute, BufferGeometry, FileLoader, Float32BufferAttribute, Loader, Vector3 } from 'three';\n\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  const loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  const mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * const mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  const materials = [];\n *  const nGeometryGroups = geometry.groups.length;\n *\n *  const colorMap = ...; // Some logic to index colors.\n *\n *  for (let i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tconst material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  const mesh = new THREE.Mesh(geometry, materials);\n */\n\nclass STLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    function isBinary(data) {\n      const reader = new DataView(data);\n      const face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      const n_faces = reader.getUint32(80, true);\n      const expect = 80 + 32 / 8 + n_faces * face_size;\n      if (expect === reader.byteLength) {\n        return true;\n      }\n\n      // An ASCII STL data must begin with 'solid ' as the first six bytes.\n      // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n      // plentiful.  So, check the first 5 bytes for 'solid'.\n\n      // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n      // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n      // Search for \"solid\" to start anywhere after those prefixes.\n\n      // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n      const solid = [115, 111, 108, 105, 100];\n      for (let off = 0; off < 5; off++) {\n        // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n\n        if (matchDataViewAt(solid, reader, off)) return false;\n      }\n\n      // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n      return true;\n    }\n    function matchDataViewAt(query, reader, offset) {\n      // Check if each byte in query matches the corresponding byte from the current offset\n\n      for (let i = 0, il = query.length; i < il; i++) {\n        if (query[i] !== reader.getUint8(offset + i)) return false;\n      }\n      return true;\n    }\n    function parseBinary(data) {\n      const reader = new DataView(data);\n      const faces = reader.getUint32(80, true);\n      let r,\n        g,\n        b,\n        hasColors = false,\n        colors;\n      let defaultR, defaultG, defaultB, alpha;\n\n      // process STL header\n      // check for default color in header (\"COLOR=rgba\" sequence).\n\n      for (let index = 0; index < 80 - 10; index++) {\n        if (reader.getUint32(index, false) == 0x434F4C4F /*COLO*/ && reader.getUint8(index + 4) == 0x52 /*'R'*/ && reader.getUint8(index + 5) == 0x3D /*'='*/) {\n          hasColors = true;\n          colors = new Float32Array(faces * 3 * 3);\n          defaultR = reader.getUint8(index + 6) / 255;\n          defaultG = reader.getUint8(index + 7) / 255;\n          defaultB = reader.getUint8(index + 8) / 255;\n          alpha = reader.getUint8(index + 9) / 255;\n        }\n      }\n      const dataOffset = 84;\n      const faceLength = 12 * 4 + 2;\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array(faces * 3 * 3);\n      const normals = new Float32Array(faces * 3 * 3);\n      for (let face = 0; face < faces; face++) {\n        const start = dataOffset + face * faceLength;\n        const normalX = reader.getFloat32(start, true);\n        const normalY = reader.getFloat32(start + 4, true);\n        const normalZ = reader.getFloat32(start + 8, true);\n        if (hasColors) {\n          const packedColor = reader.getUint16(start + 48, true);\n          if ((packedColor & 0x8000) === 0) {\n            // facet has its own unique color\n\n            r = (packedColor & 0x1F) / 31;\n            g = (packedColor >> 5 & 0x1F) / 31;\n            b = (packedColor >> 10 & 0x1F) / 31;\n          } else {\n            r = defaultR;\n            g = defaultG;\n            b = defaultB;\n          }\n        }\n        for (let i = 1; i <= 3; i++) {\n          const vertexstart = start + i * 12;\n          const componentIdx = face * 3 * 3 + (i - 1) * 3;\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[componentIdx] = normalX;\n          normals[componentIdx + 1] = normalY;\n          normals[componentIdx + 2] = normalZ;\n          if (hasColors) {\n            colors[componentIdx] = r;\n            colors[componentIdx + 1] = g;\n            colors[componentIdx + 2] = b;\n          }\n        }\n      }\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n      if (hasColors) {\n        geometry.setAttribute('color', new BufferAttribute(colors, 3));\n        geometry.hasColors = true;\n        geometry.alpha = alpha;\n      }\n      return geometry;\n    }\n    function parseASCII(data) {\n      const geometry = new BufferGeometry();\n      const patternSolid = /solid([\\s\\S]*?)endsolid/g;\n      const patternFace = /facet([\\s\\S]*?)endfacet/g;\n      let faceCounter = 0;\n      const patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n      const patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n      const patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n      const vertices = [];\n      const normals = [];\n      const normal = new Vector3();\n      let result;\n      let groupCount = 0;\n      let startVertex = 0;\n      let endVertex = 0;\n      while ((result = patternSolid.exec(data)) !== null) {\n        startVertex = endVertex;\n        const solid = result[0];\n        while ((result = patternFace.exec(solid)) !== null) {\n          let vertexCountPerFace = 0;\n          let normalCountPerFace = 0;\n          const text = result[0];\n          while ((result = patternNormal.exec(text)) !== null) {\n            normal.x = parseFloat(result[1]);\n            normal.y = parseFloat(result[2]);\n            normal.z = parseFloat(result[3]);\n            normalCountPerFace++;\n          }\n          while ((result = patternVertex.exec(text)) !== null) {\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normal.x, normal.y, normal.z);\n            vertexCountPerFace++;\n            endVertex++;\n          }\n\n          // every face have to own ONE valid normal\n\n          if (normalCountPerFace !== 1) {\n            console.error('THREE.STLLoader: Something isn\\'t right with the normal of face number ' + faceCounter);\n          }\n\n          // each face have to own THREE valid vertices\n\n          if (vertexCountPerFace !== 3) {\n            console.error('THREE.STLLoader: Something isn\\'t right with the vertices of face number ' + faceCounter);\n          }\n          faceCounter++;\n        }\n        const start = startVertex;\n        const count = endVertex - startVertex;\n        geometry.addGroup(start, count, groupCount);\n        groupCount++;\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      return geometry;\n    }\n    function ensureString(buffer) {\n      if (typeof buffer !== 'string') {\n        return new TextDecoder().decode(buffer);\n      }\n      return buffer;\n    }\n    function ensureBinary(buffer) {\n      if (typeof buffer === 'string') {\n        const array_buffer = new Uint8Array(buffer.length);\n        for (let i = 0; i < buffer.length; i++) {\n          array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n        }\n\n        return array_buffer.buffer || array_buffer;\n      } else {\n        return buffer;\n      }\n    }\n\n    // start\n\n    const binData = ensureBinary(data);\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n  }\n}\nexport { STLLoader };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","FileLoader","Float32BufferAttribute","Loader","Vector3","STLLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","isBinary","reader","DataView","face_size","n_faces","getUint32","expect","byteLength","solid","off","matchDataViewAt","query","offset","i","il","length","getUint8","parseBinary","faces","r","g","b","hasColors","colors","defaultR","defaultG","defaultB","alpha","index","Float32Array","dataOffset","faceLength","geometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","vertexstart","componentIdx","setAttribute","parseASCII","patternSolid","patternFace","faceCounter","patternFloat","source","patternVertex","RegExp","patternNormal","normal","result","groupCount","startVertex","endVertex","exec","vertexCountPerFace","normalCountPerFace","x","parseFloat","y","z","push","count","addGroup","ensureString","buffer","TextDecoder","decode","ensureBinary","array_buffer","Uint8Array","charCodeAt","binData"],"sources":["/Users/nicolas/Documents/pose-creator/node_modules/three/examples/jsm/loaders/STLLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tVector3\n} from 'three';\n\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  const loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  const mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * const mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  const materials = [];\n *  const nGeometryGroups = geometry.groups.length;\n *\n *  const colorMap = ...; // Some logic to index colors.\n *\n *  for (let i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tconst material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  const mesh = new THREE.Mesh(geometry, materials);\n */\n\n\nclass STLLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( data ) {\n\n\t\tfunction isBinary( data ) {\n\n\t\t\tconst reader = new DataView( data );\n\t\t\tconst face_size = ( 32 / 8 * 3 ) + ( ( 32 / 8 * 3 ) * 3 ) + ( 16 / 8 );\n\t\t\tconst n_faces = reader.getUint32( 80, true );\n\t\t\tconst expect = 80 + ( 32 / 8 ) + ( n_faces * face_size );\n\n\t\t\tif ( expect === reader.byteLength ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// An ASCII STL data must begin with 'solid ' as the first six bytes.\n\t\t\t// However, ASCII STLs lacking the SPACE after the 'd' are known to be\n\t\t\t// plentiful.  So, check the first 5 bytes for 'solid'.\n\n\t\t\t// Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n\t\t\t// https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n\t\t\t// Search for \"solid\" to start anywhere after those prefixes.\n\n\t\t\t// US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\t\t\tconst solid = [ 115, 111, 108, 105, 100 ];\n\n\t\t\tfor ( let off = 0; off < 5; off ++ ) {\n\n\t\t\t\t// If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n\n\t\t\t\tif ( matchDataViewAt( solid, reader, off ) ) return false;\n\n\t\t\t}\n\n\t\t\t// Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction matchDataViewAt( query, reader, offset ) {\n\n\t\t\t// Check if each byte in query matches the corresponding byte from the current offset\n\n\t\t\tfor ( let i = 0, il = query.length; i < il; i ++ ) {\n\n\t\t\t\tif ( query[ i ] !== reader.getUint8( offset + i ) ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction parseBinary( data ) {\n\n\t\t\tconst reader = new DataView( data );\n\t\t\tconst faces = reader.getUint32( 80, true );\n\n\t\t\tlet r, g, b, hasColors = false, colors;\n\t\t\tlet defaultR, defaultG, defaultB, alpha;\n\n\t\t\t// process STL header\n\t\t\t// check for default color in header (\"COLOR=rgba\" sequence).\n\n\t\t\tfor ( let index = 0; index < 80 - 10; index ++ ) {\n\n\t\t\t\tif ( ( reader.getUint32( index, false ) == 0x434F4C4F /*COLO*/ ) &&\n\t\t\t\t\t( reader.getUint8( index + 4 ) == 0x52 /*'R'*/ ) &&\n\t\t\t\t\t( reader.getUint8( index + 5 ) == 0x3D /*'='*/ ) ) {\n\n\t\t\t\t\thasColors = true;\n\t\t\t\t\tcolors = new Float32Array( faces * 3 * 3 );\n\n\t\t\t\t\tdefaultR = reader.getUint8( index + 6 ) / 255;\n\t\t\t\t\tdefaultG = reader.getUint8( index + 7 ) / 255;\n\t\t\t\t\tdefaultB = reader.getUint8( index + 8 ) / 255;\n\t\t\t\t\talpha = reader.getUint8( index + 9 ) / 255;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst dataOffset = 84;\n\t\t\tconst faceLength = 12 * 4 + 2;\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst vertices = new Float32Array( faces * 3 * 3 );\n\t\t\tconst normals = new Float32Array( faces * 3 * 3 );\n\n\t\t\tfor ( let face = 0; face < faces; face ++ ) {\n\n\t\t\t\tconst start = dataOffset + face * faceLength;\n\t\t\t\tconst normalX = reader.getFloat32( start, true );\n\t\t\t\tconst normalY = reader.getFloat32( start + 4, true );\n\t\t\t\tconst normalZ = reader.getFloat32( start + 8, true );\n\n\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\tconst packedColor = reader.getUint16( start + 48, true );\n\n\t\t\t\t\tif ( ( packedColor & 0x8000 ) === 0 ) {\n\n\t\t\t\t\t\t// facet has its own unique color\n\n\t\t\t\t\t\tr = ( packedColor & 0x1F ) / 31;\n\t\t\t\t\t\tg = ( ( packedColor >> 5 ) & 0x1F ) / 31;\n\t\t\t\t\t\tb = ( ( packedColor >> 10 ) & 0x1F ) / 31;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tr = defaultR;\n\t\t\t\t\t\tg = defaultG;\n\t\t\t\t\t\tb = defaultB;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 1; i <= 3; i ++ ) {\n\n\t\t\t\t\tconst vertexstart = start + i * 12;\n\t\t\t\t\tconst componentIdx = ( face * 3 * 3 ) + ( ( i - 1 ) * 3 );\n\n\t\t\t\t\tvertices[ componentIdx ] = reader.getFloat32( vertexstart, true );\n\t\t\t\t\tvertices[ componentIdx + 1 ] = reader.getFloat32( vertexstart + 4, true );\n\t\t\t\t\tvertices[ componentIdx + 2 ] = reader.getFloat32( vertexstart + 8, true );\n\n\t\t\t\t\tnormals[ componentIdx ] = normalX;\n\t\t\t\t\tnormals[ componentIdx + 1 ] = normalY;\n\t\t\t\t\tnormals[ componentIdx + 2 ] = normalZ;\n\n\t\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\t\tcolors[ componentIdx ] = r;\n\t\t\t\t\t\tcolors[ componentIdx + 1 ] = g;\n\t\t\t\t\t\tcolors[ componentIdx + 2 ] = b;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\n\t\t\tif ( hasColors ) {\n\n\t\t\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\t\t\t\tgeometry.hasColors = true;\n\t\t\t\tgeometry.alpha = alpha;\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction parseASCII( data ) {\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst patternSolid = /solid([\\s\\S]*?)endsolid/g;\n\t\t\tconst patternFace = /facet([\\s\\S]*?)endfacet/g;\n\t\t\tlet faceCounter = 0;\n\n\t\t\tconst patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n\t\t\tconst patternVertex = new RegExp( 'vertex' + patternFloat + patternFloat + patternFloat, 'g' );\n\t\t\tconst patternNormal = new RegExp( 'normal' + patternFloat + patternFloat + patternFloat, 'g' );\n\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\n\t\t\tconst normal = new Vector3();\n\n\t\t\tlet result;\n\n\t\t\tlet groupCount = 0;\n\t\t\tlet startVertex = 0;\n\t\t\tlet endVertex = 0;\n\n\t\t\twhile ( ( result = patternSolid.exec( data ) ) !== null ) {\n\n\t\t\t\tstartVertex = endVertex;\n\n\t\t\t\tconst solid = result[ 0 ];\n\n\t\t\t\twhile ( ( result = patternFace.exec( solid ) ) !== null ) {\n\n\t\t\t\t\tlet vertexCountPerFace = 0;\n\t\t\t\t\tlet normalCountPerFace = 0;\n\n\t\t\t\t\tconst text = result[ 0 ];\n\n\t\t\t\t\twhile ( ( result = patternNormal.exec( text ) ) !== null ) {\n\n\t\t\t\t\t\tnormal.x = parseFloat( result[ 1 ] );\n\t\t\t\t\t\tnormal.y = parseFloat( result[ 2 ] );\n\t\t\t\t\t\tnormal.z = parseFloat( result[ 3 ] );\n\t\t\t\t\t\tnormalCountPerFace ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( ( result = patternVertex.exec( text ) ) !== null ) {\n\n\t\t\t\t\t\tvertices.push( parseFloat( result[ 1 ] ), parseFloat( result[ 2 ] ), parseFloat( result[ 3 ] ) );\n\t\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\t\t\t\tvertexCountPerFace ++;\n\t\t\t\t\t\tendVertex ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// every face have to own ONE valid normal\n\n\t\t\t\t\tif ( normalCountPerFace !== 1 ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.STLLoader: Something isn\\'t right with the normal of face number ' + faceCounter );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// each face have to own THREE valid vertices\n\n\t\t\t\t\tif ( vertexCountPerFace !== 3 ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.STLLoader: Something isn\\'t right with the vertices of face number ' + faceCounter );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCounter ++;\n\n\t\t\t\t}\n\n\t\t\t\tconst start = startVertex;\n\t\t\t\tconst count = endVertex - startVertex;\n\n\t\t\t\tgeometry.addGroup( start, count, groupCount );\n\t\t\t\tgroupCount ++;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction ensureString( buffer ) {\n\n\t\t\tif ( typeof buffer !== 'string' ) {\n\n\t\t\t\treturn new TextDecoder().decode( buffer );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t}\n\n\t\tfunction ensureBinary( buffer ) {\n\n\t\t\tif ( typeof buffer === 'string' ) {\n\n\t\t\t\tconst array_buffer = new Uint8Array( buffer.length );\n\t\t\t\tfor ( let i = 0; i < buffer.length; i ++ ) {\n\n\t\t\t\t\tarray_buffer[ i ] = buffer.charCodeAt( i ) & 0xff; // implicitly assumes little-endian\n\n\t\t\t\t}\n\n\t\t\t\treturn array_buffer.buffer || array_buffer;\n\n\t\t\t} else {\n\n\t\t\t\treturn buffer;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// start\n\n\t\tconst binData = ensureBinary( data );\n\n\t\treturn isBinary( binData ) ? parseBinary( binData ) : parseASCII( ensureString( data ) );\n\n\t}\n\n}\n\nexport { STLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
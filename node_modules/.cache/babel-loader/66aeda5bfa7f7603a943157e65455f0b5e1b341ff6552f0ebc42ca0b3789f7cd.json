{"ast":null,"code":"var _jsxFileName = \"/Users/vantony/Documents/sar_storytelling/pose-creator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport URDFLoader from 'urdf-loader';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const canvasRef = useRef(null);\n  const [robot, setRobot] = useState(null);\n  const setRobotJointValues = (robot, positions) => {\n    Object.keys(positions).forEach(jointName => {\n      const joint = robot.joints[jointName];\n      if (joint && joint.setAngle) {\n        joint.setAngle(positions[jointName]);\n      }\n    });\n  };\n  const animateRobot = async robot => {\n    const position1 = {\n      joint1: 0.5,\n      joint2: -0.5,\n      joint3: 0.2\n    };\n    const position2 = {\n      joint1: -0.5,\n      joint2: 0.5,\n      joint3: -0.2\n    };\n    const position3 = {\n      joint1: 0,\n      joint2: 0,\n      joint3: 0\n    };\n    const positions = [position1, position2, position3];\n    for (const position of positions) {\n      setRobotJointValues(robot, position);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  };\n  const handleAnimateButtonClick = () => {\n    if (!robot) return;\n    animateRobot(robot);\n  };\n  useEffect(() => {\n    const manager = new THREE.LoadingManager();\n    const loader = new URDFLoader(manager);\n    loader.load('./robot.urdf', loadedRobot => {\n      setRobot(loadedRobot);\n      const scene = new THREE.Scene();\n\n      // Set up lights and camera\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n      directionalLight.position.set(0, 1, 0);\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 2;\n      scene.add(ambientLight, directionalLight, loadedRobot);\n      const renderer = new THREE.WebGLRenderer({\n        canvas: canvasRef.current\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.update();\n      const animate = () => {\n        requestAnimationFrame(animate);\n        controls.update();\n        renderer.render(scene, camera);\n      };\n      animate();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAnimateButtonClick,\n      style: {\n        position: 'absolute',\n        top: 10,\n        right: 10\n      },\n      children: \"Animate Robot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TePHEtQvZPlu2M3AaDvzIVZ/DSc=\");\n_c = App;\nexport default App;\n\n// import React, { useRef, useEffect, useState } from 'react';\n// import URDFLoader from 'urdf-loader';\n// import * as THREE from 'three';\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n// function App() {\n//   const canvasRef = useRef(null);\n//   const [jointSliders, setJointSliders] = useState({});\n\n//   const updateJointValue = (jointName, value) => {\n//     const robot = jointSliders.robot;\n//     if (robot && robot.joints[jointName]) {\n//       robot.joints[jointName].setJointValue(value);\n//     }\n//   };\n\n//   const buildJointSliders = (robot) => {\n//     const newJointSliders = Object.keys(robot.joints).reduce((sliders, jointName) => {\n//       const joint = robot.joints[jointName];\n//       sliders[jointName] = {\n//         joint: joint,\n//         value: joint.angle || 0,\n//       };\n//       return sliders;\n//     }, {});\n//     newJointSliders.robot = robot;\n//     setJointSliders(newJointSliders);\n//   };\n\n//   useEffect(() => {\n//     const manager = new THREE.LoadingManager();\n//     const loader = new URDFLoader(manager);\n\n//     loader.load('./robot.urdf', (robot) => {\n//       const scene = new THREE.Scene();\n\n//       // Set up lights and camera\n//       const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n//       const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n//       directionalLight.position.set(0, 1, 0);\n\n//       const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//       camera.position.z = 2;\n\n//       scene.add(ambientLight, directionalLight, robot);\n\n//       const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\n//       renderer.setSize(window.innerWidth, window.innerHeight);\n\n//       // Set up OrbitControls\n//       const controls = new OrbitControls(camera, renderer.domElement);\n//       controls.target.set(0, 0, 0);\n//       controls.update();\n\n//       buildJointSliders(robot);\n\n//       const animate = () => {\n//         requestAnimationFrame(animate);\n//         controls.update();\n//         renderer.render(scene, camera);\n//       };\n\n//       animate();\n//     });\n//   }, []);\n\n//   return (\n//     <>\n//       <canvas\n//         ref={canvasRef}\n//         style={{ width: '100vw', height: '100vh' }}\n//       />\n//       <div style={{ position: 'absolute', top: 10, left: 10 }}>\n//         {Object.entries(jointSliders).map(([jointName, slider]) => (\n//           jointName !== 'robot' && (\n//             <div key={jointName}>\n//               <label>{jointName}:</label>\n//               <input\n//                 type=\"range\"\n//                 min={slider.joint.limit.lower}\n//                 max={slider.joint.limit.upper}\n//                 value={slider.value}\n//                 onChange={(e) => {\n//                   const newValue = parseFloat(e.target.value);\n//                   updateJointValue(jointName, newValue);\n//                   setJointSliders((prevSliders) => ({\n//                     ...prevSliders,\n//                     [jointName]: { ...prevSliders[jointName], value: newValue },\n//                   }));\n//                 }}\n//               />\n//             </div>\n//           )\n//         ))}\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","URDFLoader","THREE","OrbitControls","jsxDEV","_jsxDEV","App","_s","canvasRef","robot","setRobot","setRobotJointValues","positions","Object","keys","forEach","jointName","joint","joints","setAngle","animateRobot","position1","joint1","joint2","joint3","position2","position3","position","Promise","resolve","setTimeout","handleAnimateButtonClick","manager","LoadingManager","loader","load","loadedRobot","scene","Scene","ambientLight","AmbientLight","directionalLight","DirectionalLight","set","camera","PerspectiveCamera","window","innerWidth","innerHeight","z","add","renderer","WebGLRenderer","canvas","current","setSize","controls","domElement","update","animate","requestAnimationFrame","render","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","top","right","_c","$RefreshReg$"],"sources":["/Users/vantony/Documents/sar_storytelling/pose-creator/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport URDFLoader from 'urdf-loader';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const [robot, setRobot] = useState(null);\n\n  const setRobotJointValues = (robot, positions) => {\n    Object.keys(positions).forEach((jointName) => {\n      const joint = robot.joints[jointName];\n      if (joint && joint.setAngle) {\n        joint.setAngle(positions[jointName]);\n      }\n    });\n  };\n\n  const animateRobot = async (robot) => {\n    const position1 = { joint1: 0.5, joint2: -0.5, joint3: 0.2 };\n    const position2 = { joint1: -0.5, joint2: 0.5, joint3: -0.2 };\n    const position3 = { joint1: 0, joint2: 0, joint3: 0 };\n\n    const positions = [position1, position2, position3];\n    for (const position of positions) {\n      setRobotJointValues(robot, position);\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n  };\n\n  const handleAnimateButtonClick = () => {\n    if (!robot) return;\n    animateRobot(robot);\n  };\n\n  useEffect(() => {\n    const manager = new THREE.LoadingManager();\n    const loader = new URDFLoader(manager);\n\n    loader.load('./robot.urdf', (loadedRobot) => {\n      setRobot(loadedRobot);\n      const scene = new THREE.Scene();\n\n      // Set up lights and camera\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n      directionalLight.position.set(0, 1, 0);\n\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 2;\n\n      scene.add(ambientLight, directionalLight, loadedRobot);\n\n      const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.update();\n\n      const animate = () => {\n        requestAnimationFrame(animate);\n        controls.update();\n        renderer.render(scene, camera);\n      };\n\n      animate();\n    });\n  }, []);\n\n  return (\n    <div>\n      <canvas ref={canvasRef} style={{ width: '100vw', height: '100vh' }} />\n      <button onClick={handleAnimateButtonClick} style={{ position: 'absolute', top: 10, right: 10 }}>\n        Animate Robot\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n// import React, { useRef, useEffect, useState } from 'react';\n// import URDFLoader from 'urdf-loader';\n// import * as THREE from 'three';\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n// function App() {\n//   const canvasRef = useRef(null);\n//   const [jointSliders, setJointSliders] = useState({});\n\n//   const updateJointValue = (jointName, value) => {\n//     const robot = jointSliders.robot;\n//     if (robot && robot.joints[jointName]) {\n//       robot.joints[jointName].setJointValue(value);\n//     }\n//   };\n\n//   const buildJointSliders = (robot) => {\n//     const newJointSliders = Object.keys(robot.joints).reduce((sliders, jointName) => {\n//       const joint = robot.joints[jointName];\n//       sliders[jointName] = {\n//         joint: joint,\n//         value: joint.angle || 0,\n//       };\n//       return sliders;\n//     }, {});\n//     newJointSliders.robot = robot;\n//     setJointSliders(newJointSliders);\n//   };\n\n//   useEffect(() => {\n//     const manager = new THREE.LoadingManager();\n//     const loader = new URDFLoader(manager);\n\n//     loader.load('./robot.urdf', (robot) => {\n//       const scene = new THREE.Scene();\n\n//       // Set up lights and camera\n//       const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n//       const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n//       directionalLight.position.set(0, 1, 0);\n\n//       const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//       camera.position.z = 2;\n\n//       scene.add(ambientLight, directionalLight, robot);\n\n//       const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\n//       renderer.setSize(window.innerWidth, window.innerHeight);\n\n//       // Set up OrbitControls\n//       const controls = new OrbitControls(camera, renderer.domElement);\n//       controls.target.set(0, 0, 0);\n//       controls.update();\n\n//       buildJointSliders(robot);\n\n//       const animate = () => {\n//         requestAnimationFrame(animate);\n//         controls.update();\n//         renderer.render(scene, camera);\n//       };\n\n//       animate();\n//     });\n//   }, []);\n\n//   return (\n//     <>\n//       <canvas\n//         ref={canvasRef}\n//         style={{ width: '100vw', height: '100vh' }}\n//       />\n//       <div style={{ position: 'absolute', top: 10, left: 10 }}>\n//         {Object.entries(jointSliders).map(([jointName, slider]) => (\n//           jointName !== 'robot' && (\n//             <div key={jointName}>\n//               <label>{jointName}:</label>\n//               <input\n//                 type=\"range\"\n//                 min={slider.joint.limit.lower}\n//                 max={slider.joint.limit.upper}\n//                 value={slider.value}\n//                 onChange={(e) => {\n//                   const newValue = parseFloat(e.target.value);\n//                   updateJointValue(jointName, newValue);\n//                   setJointSliders((prevSliders) => ({\n//                     ...prevSliders,\n//                     [jointName]: { ...prevSliders[jointName], value: newValue },\n//                   }));\n//                 }}\n//               />\n//             </div>\n//           )\n//         ))}\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
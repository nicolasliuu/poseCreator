{"ast":null,"code":"import { Object3D, Vector3 } from 'three';\nclass URDFBase extends Object3D {\n  constructor() {\n    super(...arguments);\n    this.urdfNode = null;\n    this.urdfName = '';\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.urdfNode = source.urdfNode;\n    this.urdfName = source.urdfName;\n    return this;\n  }\n}\nclass URDFCollider extends URDFBase {\n  constructor() {\n    super(...arguments);\n    this.isURDFCollider = true;\n    this.type = 'URDFCollider';\n  }\n}\nclass URDFVisual extends URDFBase {\n  constructor() {\n    super(...arguments);\n    this.isURDFVisual = true;\n    this.type = 'URDFVisual';\n  }\n}\nclass URDFLink extends URDFBase {\n  constructor() {\n    super(...arguments);\n    this.isURDFLink = true;\n    this.type = 'URDFLink';\n  }\n}\nclass URDFJoint extends URDFBase {\n  get jointType() {\n    return this._jointType;\n  }\n  set jointType(v) {\n    if (this.jointType === v) return;\n    this._jointType = v;\n    this.matrixWorldNeedsUpdate = true;\n    switch (v) {\n      case 'fixed':\n        this.jointValue = [];\n        break;\n      case 'continuous':\n      case 'revolute':\n      case 'prismatic':\n        this.jointValue = new Array(1).fill(0);\n        break;\n      case 'planar':\n        this.jointValue = new Array(2).fill(0);\n        break;\n      case 'floating':\n        this.jointValue = new Array(6).fill(0);\n        break;\n    }\n  }\n  get angle() {\n    return this.jointValue[0];\n  }\n  constructor() {\n    super(...arguments);\n    this.isURDFJoint = true;\n    this.type = 'URDFJoint';\n    this.jointValue = null;\n    this.jointType = 'fixed';\n    this.axis = new Vector3(1, 0, 0);\n    this.limit = {\n      lower: 0,\n      upper: 0\n    };\n    this.ignoreLimits = false;\n    this.origPosition = null;\n    this.origQuaternion = null;\n    this.mimicJoints = [];\n  }\n\n  /* Overrides */\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.jointType = source.jointType;\n    this.axis = source.axis.clone();\n    this.limit.lower = source.limit.lower;\n    this.limit.upper = source.limit.upper;\n    this.ignoreLimits = false;\n    this.jointValue = [...source.jointValue];\n    this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n    this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n    this.mimicJoints = [...source.mimicJoints];\n    return this;\n  }\n\n  /* Public Functions */\n  setJointValue() {\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n    values = values.map(v => parseFloat(v));\n    if (!this.origPosition || !this.origQuaternion) {\n      this.origPosition = this.position.clone();\n      this.origQuaternion = this.quaternion.clone();\n    }\n    let didUpdate = false;\n    this.mimicJoints.forEach(joint => {\n      didUpdate = joint.updateFromMimickedJoint(...values) || didUpdate;\n    });\n    switch (this.jointType) {\n      case 'fixed':\n        {\n          return didUpdate;\n        }\n      case 'continuous':\n      case 'revolute':\n        {\n          let angle = values[0];\n          if (angle == null) return didUpdate;\n          if (angle === this.jointValue[0]) return didUpdate;\n          if (!this.ignoreLimits && this.jointType === 'revolute') {\n            angle = Math.min(this.limit.upper, angle);\n            angle = Math.max(this.limit.lower, angle);\n          }\n          this.quaternion.setFromAxisAngle(this.axis, angle).premultiply(this.origQuaternion);\n          if (this.jointValue[0] !== angle) {\n            this.jointValue[0] = angle;\n            this.matrixWorldNeedsUpdate = true;\n            return true;\n          } else {\n            return didUpdate;\n          }\n        }\n      case 'prismatic':\n        {\n          let pos = values[0];\n          if (pos == null) return didUpdate;\n          if (pos === this.jointValue[0]) return didUpdate;\n          if (!this.ignoreLimits) {\n            pos = Math.min(this.limit.upper, pos);\n            pos = Math.max(this.limit.lower, pos);\n          }\n          this.position.copy(this.origPosition);\n          this.position.addScaledVector(this.axis, pos);\n          if (this.jointValue[0] !== pos) {\n            this.jointValue[0] = pos;\n            this.matrixWorldNeedsUpdate = true;\n            return true;\n          } else {\n            return didUpdate;\n          }\n        }\n      case 'floating':\n      case 'planar':\n        // TODO: Support these joint types\n        console.warn(`'${this.jointType}' joint not yet supported`);\n    }\n    return didUpdate;\n  }\n}\nclass URDFMimicJoint extends URDFJoint {\n  constructor() {\n    super(...arguments);\n    this.type = 'URDFMimicJoint';\n    this.mimicJoint = null;\n    this.offset = 0;\n    this.multiplier = 1;\n  }\n  updateFromMimickedJoint() {\n    for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      values[_key2] = arguments[_key2];\n    }\n    const modifiedValues = values.map(x => x * this.multiplier + this.offset);\n    return super.setJointValue(...modifiedValues);\n  }\n\n  /* Overrides */\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.mimicJoint = source.mimicJoint;\n    this.offset = source.offset;\n    this.multiplier = source.multiplier;\n    return this;\n  }\n}\nclass URDFRobot extends URDFLink {\n  constructor() {\n    super(...arguments);\n    this.isURDFRobot = true;\n    this.urdfNode = null;\n    this.urdfRobotNode = null;\n    this.robotName = null;\n    this.links = null;\n    this.joints = null;\n    this.colliders = null;\n    this.visual = null;\n    this.frames = null;\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.urdfRobotNode = source.urdfRobotNode;\n    this.robotName = source.robotName;\n    this.links = {};\n    this.joints = {};\n    this.colliders = {};\n    this.visual = {};\n    this.traverse(c => {\n      if (c.isURDFJoint && c.urdfName in source.joints) {\n        this.joints[c.urdfName] = c;\n      }\n      if (c.isURDFLink && c.urdfName in source.links) {\n        this.links[c.urdfName] = c;\n      }\n      if (c.isURDFCollider && c.urdfName in source.colliders) {\n        this.colliders[c.urdfName] = c;\n      }\n      if (c.isURDFVisual && c.urdfName in source.visual) {\n        this.visual[c.urdfName] = c;\n      }\n    });\n    this.frames = {\n      ...this.colliders,\n      ...this.visual,\n      ...this.links,\n      ...this.joints\n    };\n    return this;\n  }\n  getFrame(name) {\n    return this.frames[name];\n  }\n  setJointValue(jointName) {\n    const joint = this.joints[jointName];\n    if (joint) {\n      for (var _len3 = arguments.length, angle = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        angle[_key3 - 1] = arguments[_key3];\n      }\n      return joint.setJointValue(...angle);\n    }\n    return false;\n  }\n  setJointValues(values) {\n    let didChange = false;\n    for (const name in values) {\n      const value = values[name];\n      if (Array.isArray(value)) {\n        didChange = this.setJointValue(name, ...value) || didChange;\n      } else {\n        didChange = this.setJointValue(name, value) || didChange;\n      }\n    }\n    return didChange;\n  }\n}\nexport { URDFRobot, URDFLink, URDFJoint, URDFMimicJoint, URDFVisual, URDFCollider };","map":{"version":3,"names":["Object3D","Vector3","URDFBase","constructor","arguments","urdfNode","urdfName","copy","source","recursive","URDFCollider","isURDFCollider","type","URDFVisual","isURDFVisual","URDFLink","isURDFLink","URDFJoint","jointType","_jointType","v","matrixWorldNeedsUpdate","jointValue","Array","fill","angle","isURDFJoint","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","mimicJoints","clone","setJointValue","_len","length","values","_key","map","parseFloat","position","quaternion","didUpdate","forEach","joint","updateFromMimickedJoint","Math","min","max","setFromAxisAngle","premultiply","pos","addScaledVector","console","warn","URDFMimicJoint","mimicJoint","offset","multiplier","_len2","_key2","modifiedValues","x","URDFRobot","isURDFRobot","urdfRobotNode","robotName","links","joints","colliders","visual","frames","traverse","c","getFrame","name","jointName","_len3","_key3","setJointValues","didChange","value","isArray"],"sources":["/Users/nicolas/Documents/pose-creator/node_modules/urdf-loader/src/URDFClasses.js"],"sourcesContent":["import { Object3D, Vector3 } from 'three';\n\nclass URDFBase extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.urdfNode = null;\n        this.urdfName = '';\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.urdfName = source.urdfName;\n\n        return this;\n\n    }\n\n}\n\nclass URDFCollider extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFCollider = true;\n        this.type = 'URDFCollider';\n\n    }\n\n}\n\nclass URDFVisual extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFVisual = true;\n        this.type = 'URDFVisual';\n\n    }\n\n}\n\nclass URDFLink extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n\n    }\n\n}\n\nclass URDFJoint extends URDFBase {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n        this.matrixWorldNeedsUpdate = true;\n        switch (v) {\n\n            case 'fixed':\n                this.jointValue = [];\n                break;\n\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = new Array(1).fill(0);\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue[0];\n\n    }\n\n    constructor(...args) {\n\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = new Vector3(1, 0, 0);\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n\n        this.mimicJoints = [];\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.jointType = source.jointType;\n        this.axis = source.axis.clone();\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = [...source.jointValue];\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        this.mimicJoints = [...source.mimicJoints];\n\n        return this;\n\n    }\n\n    /* Public Functions */\n    setJointValue(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        let didUpdate = false;\n\n        this.mimicJoints.forEach(joint => {\n\n            didUpdate = joint.updateFromMimickedJoint(...values) || didUpdate;\n\n        });\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n\n                return didUpdate;\n\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) return didUpdate;\n                if (angle === this.jointValue[0]) return didUpdate;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.quaternion\n                    .setFromAxisAngle(this.axis, angle)\n                    .premultiply(this.origQuaternion);\n\n                if (this.jointValue[0] !== angle) {\n\n                    this.jointValue[0] = angle;\n                    this.matrixWorldNeedsUpdate = true;\n                    return true;\n\n                } else {\n\n                    return didUpdate;\n\n                }\n\n            }\n\n            case 'prismatic': {\n\n                let pos = values[0];\n                if (pos == null) return didUpdate;\n                if (pos === this.jointValue[0]) return didUpdate;\n\n                if (!this.ignoreLimits) {\n\n                    pos = Math.min(this.limit.upper, pos);\n                    pos = Math.max(this.limit.lower, pos);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, pos);\n\n                if (this.jointValue[0] !== pos) {\n\n                    this.jointValue[0] = pos;\n                    this.matrixWorldNeedsUpdate = true;\n                    return true;\n\n                } else {\n\n                    return didUpdate;\n\n                }\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return didUpdate;\n\n    }\n\n}\n\nclass URDFMimicJoint extends URDFJoint {\n\n    constructor(...args) {\n\n        super(...args);\n        this.type = 'URDFMimicJoint';\n        this.mimicJoint = null;\n        this.offset = 0;\n        this.multiplier = 1;\n\n    }\n\n    updateFromMimickedJoint(...values) {\n\n        const modifiedValues = values.map(x => x * this.multiplier + this.offset);\n        return super.setJointValue(...modifiedValues);\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.mimicJoint = source.mimicJoint;\n        this.offset = source.offset;\n        this.multiplier = source.multiplier;\n\n        return this;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n        this.colliders = null;\n        this.visual = null;\n        this.frames = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n        this.colliders = {};\n        this.visual = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.urdfName in source.joints) {\n\n                this.joints[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFLink && c.urdfName in source.links) {\n\n                this.links[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFCollider && c.urdfName in source.colliders) {\n\n                this.colliders[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFVisual && c.urdfName in source.visual) {\n\n                this.visual[c.urdfName] = c;\n\n            }\n\n        });\n\n        this.frames = {\n            ...this.colliders,\n            ...this.visual,\n            ...this.links,\n            ...this.joints,\n        };\n\n        return this;\n\n    }\n\n    getFrame(name) {\n\n        return this.frames[name];\n\n    }\n\n    setJointValue(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setJointValue(...angle);\n\n        }\n\n        return false;\n    }\n\n    setJointValues(values) {\n\n        let didChange = false;\n        for (const name in values) {\n\n            const value = values[name];\n            if (Array.isArray(value)) {\n\n                didChange = this.setJointValue(name, ...value) || didChange;\n\n            } else {\n\n                didChange = this.setJointValue(name, value) || didChange;\n\n            }\n\n        }\n\n        return didChange;\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, URDFMimicJoint, URDFVisual, URDFCollider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}